#!/usr/bin/env python
# -*- coding: utf-8 -*-
import tkinter as tk
from tkinter import ttk
from ...theme import FONT_SMALL_ITALIC, TEXT_HINT, SUCCESS, ERROR
from ...widgets.common.tooltips import create_tooltip

class StatusPageBuilder:
    """
    –ö–ª–∞—Å—Å –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ —Å—Ç–∞—Ç—É—Å–∞ –∏ –æ—Ç—á–µ—Ç–æ–≤ —Å —É–ª—É—á—à–µ–Ω–Ω—ã–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–æ–º
    """
    def __init__(self, app_instance):
        self.app = app_instance
        self.sort_order = {}  # –î–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –ø–æ—Ä—è–¥–∫–∞ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏ —Å—Ç–æ–ª–±—Ü–æ–≤

    def create_status_page(self, parent_frame):
        """
        –°–æ–∑–¥–∞—ë—Ç —Å—Ç—Ä–∞–Ω–∏—Ü—É —Å–æ —Å—Ç–∞—Ç—É—Å–∞–º–∏, –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä–æ–º –∏ —Ç–∞–±–ª–∏—Ü–µ–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        """
        # –°–æ–∑–¥–∞–µ–º –ø–∞–Ω–µ–ª—å —Å—Ç–∞—Ç—É—Å–∞ –∏ —Ç–µ–∫—É—â–µ–≥–æ —Ñ–∞–π–ª–∞
        self.create_status_panel(parent_frame)
        
        # –°–æ–∑–¥–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä —Å –∞–Ω–∏–º–∞—Ü–∏–µ–π
        self.create_progress_bar(parent_frame)
        
        # –°–æ–∑–¥–∞–µ–º —Ñ–∏–ª—å—Ç—Ä—ã –¥–ª—è —Ç–∞–±–ª–∏—Ü—ã —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        self.create_filters_panel(parent_frame)
        
        # –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        self.create_results_table(parent_frame)
        
    def create_status_panel(self, parent_frame=None):
        """
        –°–æ–∑–¥–∞–µ—Ç –ø–∞–Ω–µ–ª—å —Å—Ç–∞—Ç—É—Å–∞ –∏ —Ç–µ–∫—É—â–µ–≥–æ —Ñ–∞–π–ª–∞ —Å —É–ª—É—á—à–µ–Ω–Ω—ã–º —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ–º
        """
        if parent_frame is None:
            parent_frame = self.app.root
            
        status_frame = ttk.Frame(parent_frame, padding="10 5")
        status_frame.pack(fill=tk.X, pady=0)
        
        # –õ–µ–≤–∞—è —á–∞—Å—Ç—å - —Å—Ç–∞—Ç—É—Å –ø—Ä–æ–≤–µ—Ä–∫–∏
        status_left_frame = ttk.Frame(status_frame)
        status_left_frame.pack(side=tk.LEFT)
        
        ttk.Label(status_left_frame, text="–°—Ç–∞—Ç—É—Å:", font=("", 10, "bold")).pack(side=tk.LEFT, padx=(0, 5))
        
        # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º —Å—Ç–∞—Ç—É—Å —Å —Ü–≤–µ—Ç–æ–≤—ã–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–º
        self.status_indicator = ttk.Label(status_left_frame, textvariable=self.app.status_text)
        self.status_indicator.pack(side=tk.LEFT, padx=(0, 20))
        
        # –ü—Ä–∞–≤–∞—è —á–∞—Å—Ç—å - –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç–µ–∫—É—â–µ–º —Ñ–∞–π–ª–µ
        file_frame = ttk.Frame(status_frame)
        file_frame.pack(side=tk.LEFT, fill=tk.X, expand=True)
        
        ttk.Label(file_frame, text="–¢–µ–∫—É—â–∏–π —Ñ–∞–π–ª:", font=("", 10, "bold")).pack(side=tk.LEFT, padx=(0, 5))
        
        # –¢–µ–∫—É—â–∏–π –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º—ã–π —Ñ–∞–π–ª (—Å –æ–±—Ä–µ–∑–∫–æ–π –¥–ª–∏–Ω–Ω—ã—Ö –ø—É—Ç–µ–π)
        self.current_file_label = ttk.Label(file_frame, textvariable=self.app.current_file, wraplength=500)
        self.current_file_label.pack(side=tk.LEFT, fill=tk.X, expand=True)
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å –ø–æ–¥ —Å—Ç–∞—Ç—É—Å–Ω–æ–π –ø–∞–Ω–µ–ª—å—é
        separator = ttk.Separator(parent_frame, orient=tk.HORIZONTAL)
        separator.pack(fill=tk.X, padx=10, pady=5)

    def create_progress_bar(self, parent_frame=None):
        """
        –°–æ–∑–¥–∞–µ—Ç –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä –∏ –ø–∞–Ω–µ–ª—å —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ —Ñ–∞–π–ª–∞—Ö
        """
        if parent_frame is None:
            parent_frame = self.app.root
            
        # –°–æ–∑–¥–∞–µ–º —Ä–∞–º–∫—É –¥–ª—è –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä–∞
        progress_frame = ttk.Frame(parent_frame, padding="10 5")
        progress_frame.pack(fill=tk.X)
        
        # –°–æ–∑–¥–∞–µ–º —Ä–∞–º–∫—É –¥–ª—è —Å—á–µ—Ç—á–∏–∫–æ–≤ —Ñ–∞–π–ª–æ–≤
        counts_frame = ttk.Frame(progress_frame)
        counts_frame.pack(fill=tk.X, pady=(0, 5))
        
        # –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ñ–∞–π–ª–æ–≤
        total_frame = ttk.Frame(counts_frame)
        total_frame.pack(side=tk.LEFT, padx=(0, 20))
        
        ttk.Label(total_frame, text="–í—Å–µ–≥–æ —Ñ–∞–π–ª–æ–≤:").pack(side=tk.LEFT)
        ttk.Label(total_frame, textvariable=self.app.total_files_var, 
                  font=("", 10, "bold")).pack(side=tk.LEFT, padx=(5, 0))
        
        # –û—Å—Ç–∞–ª–æ—Å—å —Ñ–∞–π–ª–æ–≤
        remaining_frame = ttk.Frame(counts_frame)
        remaining_frame.pack(side=tk.LEFT, padx=(0, 20))
        
        ttk.Label(remaining_frame, text="–û—Å—Ç–∞–ª–æ—Å—å:").pack(side=tk.LEFT)
        ttk.Label(remaining_frame, textvariable=self.app.remaining_files_var, 
                  font=("", 10, "bold")).pack(side=tk.LEFT, padx=(5, 0))
        
        # –ü—Ä–æ—Ü–µ–Ω—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
        percent_frame = ttk.Frame(counts_frame)
        percent_frame.pack(side=tk.LEFT)
        
        self.percent_var = tk.StringVar(value="0%")
        ttk.Label(percent_frame, text="–í—ã–ø–æ–ª–Ω–µ–Ω–æ:").pack(side=tk.LEFT)
        ttk.Label(percent_frame, textvariable=self.percent_var, 
                  font=("", 10, "bold")).pack(side=tk.LEFT, padx=(5, 0))
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Å–∞–º –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä
        self.app.progress_bar = ttk.Progressbar(
            progress_frame, 
            variable=self.app.progress_value,
            length=100,
            mode='determinate'
        )
        self.app.progress_bar.pack(fill=tk.X)
        
        # –ü—Ä–∏–≤—è–∑—ã–≤–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ—Ü–µ–Ω—Ç–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
        self.app.progress_value.trace_add("write", self._update_progress_percent)
        
        # –ü–æ–¥—Å–∫–∞–∑–∫–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        hint_frame = ttk.Frame(parent_frame, padding="10 5")
        hint_frame.pack(fill=tk.X)
        
        ttk.Label(
            hint_frame, 
            text="–ü–æ–¥—Å–∫–∞–∑–∫–∞: –¥–≤–∞–∂–¥—ã —â–µ–ª–∫–Ω–∏—Ç–µ –ø–æ —Å—Ç—Ä–æ–∫–µ —Å —Ñ–∞–π–ª–æ–º, —á—Ç–æ–±—ã –æ—Ç–∫—Ä—ã—Ç—å –µ–≥–æ", 
            font=FONT_SMALL_ITALIC, 
            foreground=TEXT_HINT
        ).pack(side=tk.RIGHT)
    
    def _update_progress_percent(self, *args):
        """
        –û–±–Ω–æ–≤–ª—è–µ—Ç –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø—Ä–æ—Ü–µ–Ω—Ç–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –Ω–∞ –æ—Å–Ω–æ–≤–µ –∑–Ω–∞—á–µ–Ω–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä–∞
        """
        progress = self.app.progress_value.get()
        self.percent_var.set(f"{int(progress)}%")

    def create_filters_panel(self, parent_frame=None):
        """
        –°–æ–∑–¥–∞–µ—Ç –ø–∞–Ω–µ–ª—å —Å —Ñ–∏–ª—å—Ç—Ä–∞–º–∏ –¥–ª—è —Ç–∞–±–ª–∏—Ü—ã —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        """
        if parent_frame is None:
            parent_frame = self.app.root
            
        filters_frame = ttk.Frame(parent_frame, padding="10 5")
        filters_frame.pack(fill=tk.X)
        
        # –î–æ–±–∞–≤–ª—è–µ–º –º–µ—Ç–∫—É –§–∏–ª—å—Ç—Ä—ã:
        ttk.Label(filters_frame, text="–§–∏–ª—å—Ç—Ä—ã:").pack(side=tk.LEFT, padx=(0, 5))
        
        # –ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —Ñ–∏–ª—å—Ç—Ä–∞
        self.filter_var = tk.StringVar(value="all")
        
        # –°–æ–∑–¥–∞–µ–º —Ä–∞–¥–∏–æ–∫–Ω–æ–ø–∫–∏ –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏
        ttk.Radiobutton(
            filters_frame, 
            text="–í—Å–µ —Ñ–∞–π–ª—ã", 
            variable=self.filter_var, 
            value="all",
            command=self._apply_filter
        ).pack(side=tk.LEFT, padx=5)
        
        ttk.Radiobutton(
            filters_frame, 
            text="–¢–æ–ª—å–∫–æ —Å –æ—à–∏–±–∫–∞–º–∏", 
            variable=self.filter_var, 
            value="failed",
            command=self._apply_filter
        ).pack(side=tk.LEFT, padx=5)
        
        ttk.Radiobutton(
            filters_frame, 
            text="–¢–æ–ª—å–∫–æ —É—Å–ø–µ—à–Ω—ã–µ", 
            variable=self.filter_var, 
            value="passed",
            command=self._apply_filter
        ).pack(side=tk.LEFT, padx=5)
        
        # –ü–æ–ª–µ –¥–ª—è –ø–æ–∏—Å–∫–∞ –ø–æ –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞
        ttk.Label(filters_frame, text="–ü–æ–∏—Å–∫:").pack(side=tk.LEFT, padx=(20, 5))
        
        self.search_var = tk.StringVar()
        search_entry = ttk.Entry(filters_frame, textvariable=self.search_var, width=25)
        search_entry.pack(side=tk.LEFT, padx=(0, 5))
        
        # –ö–Ω–æ–ø–∫–∞ –ø–æ–∏—Å–∫–∞
        search_button = ttk.Button(
            filters_frame, 
            text="–ù–∞–π—Ç–∏ üîç", 
            command=self._apply_filter
        )
        search_button.pack(side=tk.LEFT)
        
        # –ü—Ä–∏–≤—è–∑—ã–≤–∞–µ–º —Å–æ–±—ã—Ç–∏–µ –Ω–∞–∂–∞—Ç–∏—è Enter –≤ –ø–æ–ª–µ –ø–æ–∏—Å–∫–∞
        search_entry.bind("<Return>", lambda e: self._apply_filter())

    def _apply_filter(self):
        """
        –ü—Ä–∏–º–µ–Ω—è–µ—Ç —Ñ–∏–ª—å—Ç—Ä—ã –∏ –ø–æ–∏—Å–∫ –∫ —Ç–∞–±–ª–∏—Ü–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        """
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è —Ñ–∏–ª—å—Ç—Ä–∞ –∏ –ø–æ–∏—Å–∫–∞
        filter_type = self.filter_var.get()
        search_text = self.search_var.get().lower().strip()

        # –û—á–∏—â–∞–µ–º —Ç–∞–±–ª–∏—Ü—É
        for item in self.app.results_tree.get_children():
            self.app.results_tree.delete(item)

        # –§–∏–ª—å—Ç—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        filtered_results = []
        for result in self.app.results:
            # –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ —Ç–∏–ø—É —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
            if filter_type == "all":
                matches_filter = True
            elif filter_type == "passed":
                matches_filter = result['result'] == "–ü—Ä–æ–π–¥–µ–Ω"
            elif filter_type == "failed":
                matches_filter = result['result'] in ["–ù–µ –ø—Ä–æ–π–¥–µ–Ω", "–û—à–∏–±–∫–∞", "–ü—Ä–æ–ø—É—â–µ–Ω"]
            else:
                matches_filter = True

            # –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ —Å—Ç—Ä–æ–∫–µ –ø–æ–∏—Å–∫–∞
            matches_search = True
            if search_text:
                matches_search = (
                    search_text in result['file_name'].lower() or
                    search_text in result['file_path'].lower() or
                    search_text in result['comment'].lower()
                )

            if matches_filter and matches_search:
                filtered_results.append(result)

        # –ó–∞–ø–æ–ª–Ω—è–µ–º —Ç–∞–±–ª–∏—Ü—É –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã–º–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏
        for idx, result in enumerate(filtered_results, 1):
            tag = 'passed' if result['result'] == "–ü—Ä–æ–π–¥–µ–Ω" else 'failed'
            self.app.results_tree.insert(
                '', 'end',
                values=(
                    idx,
                    result['file_name'],
                    result['file_type'],
                    result['file_path'],
                    result['result'],
                    result['comment']
                ),
                tags=(tag,)
            )

    def _sort_column(self, col):
        """
        –°–æ—Ä—Ç–∏—Ä—É–µ—Ç —Ç–∞–±–ª–∏—Ü—É –ø–æ —É–∫–∞–∑–∞–Ω–Ω–æ–º—É —Å—Ç–æ–ª–±—Ü—É, –ø–µ—Ä–µ–∫–ª—é—á–∞—è –ø–æ—Ä—è–¥–æ–∫ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏
        """
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–æ—Ä—è–¥–æ–∫ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏ –¥–ª—è —Å—Ç–æ–ª–±—Ü–∞ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –≤–æ—Å—Ö–æ–¥—è—â–∏–π)
        if col not in self.sort_order:
            self.sort_order[col] = True  # True - –≤–æ—Å—Ö–æ–¥—è—â–∏–π, False - –Ω–∏—Å—Ö–æ–¥—è—â–∏–π
        else:
            self.sort_order[col] = not self.sort_order[col]

        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ –¥–∞–Ω–Ω—ã–µ —Ç–∞–±–ª–∏—Ü—ã
        data = []
        for item in self.app.results_tree.get_children():
            values = self.app.results_tree.item(item, 'values')
            data.append(values)

        # –ò–Ω–¥–µ–∫—Å —Å—Ç–æ–ª–±—Ü–∞ –≤ –¥–∞–Ω–Ω—ã—Ö
        col_index = {
            "‚Ññ": 0,
            "–ò–º—è —Ñ–∞–π–ª–∞": 1,
            "–¢–∏–ø —Ñ–∞–π–ª–∞": 2,
            "–ü—É—Ç—å –∫ —Ñ–∞–π–ª—É": 3,
            "–†–µ–∑—É–ª—å—Ç–∞—Ç": 4,
            "–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π": 5
        }[col]

        # –°–æ—Ä—Ç–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ
        data.sort(
            key=lambda x: x[col_index].lower() if isinstance(x[col_index], str) else x[col_index],
            reverse=not self.sort_order[col]
        )

        # –û—á–∏—â–∞–µ–º —Ç–∞–±–ª–∏—Ü—É
        for item in self.app.results_tree.get_children():
            self.app.results_tree.delete(item)

        # –ü–µ—Ä–µ–∑–∞–ø–æ–ª–Ω—è–µ–º —Ç–∞–±–ª–∏—Ü—É –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
        for idx, values in enumerate(data, 1):
            tag = 'passed' if values[4] == "–ü—Ä–æ–π–¥–µ–Ω" else 'failed'
            self.app.results_tree.insert(
                '', 'end',
                values=(idx, *values[1:]),  # –û–±–Ω–æ–≤–ª—è–µ–º –Ω–æ–º–µ—Ä —Å—Ç—Ä–æ–∫–∏
                tags=(tag,)
            )

    def create_results_table(self, parent_frame=None):
        """
        –°–æ–∑–¥–∞–µ—Ç —Ç–∞–±–ª–∏—Ü—É —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å—é —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏ –∏ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏
        """
        if parent_frame is None:
            parent_frame = self.app.root
            
        results_frame = ttk.Frame(parent_frame, padding="10")
        results_frame.pack(fill=tk.BOTH, expand=True)
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–æ–ª–æ–Ω–∫–∏ —Ç–∞–±–ª–∏—Ü—ã
        columns = ("‚Ññ", "–ò–º—è —Ñ–∞–π–ª–∞", "–¢–∏–ø —Ñ–∞–π–ª–∞", "–ü—É—Ç—å –∫ —Ñ–∞–π–ª—É", "–†–µ–∑—É–ª—å—Ç–∞—Ç", "–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π")
        
        # –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É
        self.app.results_tree = ttk.Treeview(
            results_frame, 
            columns=columns, 
            show='headings',
            selectmode='browse'
        )
        
        # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏ –∏ –∫–æ–ª–æ–Ω–∫–∏
        for col in columns:
            self.app.results_tree.heading(
                col, 
                text=col,
                command=lambda c=col: self._sort_column(c)
            )
        
        # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º —à–∏—Ä–∏–Ω—É –∫–æ–ª–æ–Ω–æ–∫
        self.app.results_tree.column("‚Ññ", width=40, anchor=tk.CENTER, stretch=False)
        self.app.results_tree.column("–ò–º—è —Ñ–∞–π–ª–∞", width=150, anchor=tk.W, stretch=True)
        self.app.results_tree.column("–¢–∏–ø —Ñ–∞–π–ª–∞", width=80, anchor=tk.CENTER, stretch=False)
        self.app.results_tree.column("–ü—É—Ç—å –∫ —Ñ–∞–π–ª—É", width=200, anchor=tk.W, stretch=True)
        self.app.results_tree.column("–†–µ–∑—É–ª—å—Ç–∞—Ç", width=100, anchor=tk.CENTER, stretch=False)
        self.app.results_tree.column("–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π", width=300, anchor=tk.W, stretch=True)
        
        # –î–æ–±–∞–≤–ª—è–µ–º –≤–µ—Ä—Ç–∏–∫–∞–ª—å–Ω—É—é –ø–æ–ª–æ—Å—É –ø—Ä–æ–∫—Ä—É—Ç–∫–∏
        v_scrollbar = ttk.Scrollbar(results_frame, orient=tk.VERTICAL, command=self.app.results_tree.yview)
        self.app.results_tree.configure(yscroll=v_scrollbar.set)
        
        # –î–æ–±–∞–≤–ª—è–µ–º –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω—É—é –ø–æ–ª–æ—Å—É –ø—Ä–æ–∫—Ä—É—Ç–∫–∏
        h_scrollbar = ttk.Scrollbar(results_frame, orient=tk.HORIZONTAL, command=self.app.results_tree.xview)
        self.app.results_tree.configure(xscroll=h_scrollbar.set)
        
        # –†–∞–∑–º–µ—â–∞–µ–º —ç–ª–µ–º–µ–Ω—Ç—ã
        self.app.results_tree.pack(side=tk.LEFT, fill=tk.BOTH, expand=True)
        v_scrollbar.pack(side=tk.RIGHT, fill=tk.Y)
        h_scrollbar.pack(side=tk.BOTTOM, fill=tk.X)
        
        # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º —Ç–µ–≥–∏ –¥–ª—è –≤–∏–∑—É–∞–ª—å–Ω–æ–≥–æ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è —Å—Ç—Ä–æ–∫
        self.app.results_tree.tag_configure('passed', background='#C8E6C9')  # –°–≤–µ—Ç–ª–æ-–∑–µ–ª–µ–Ω—ã–π
        self.app.results_tree.tag_configure('failed', background='#FFCDD2')  # –°–≤–µ—Ç–ª–æ-–∫—Ä–∞—Å–Ω—ã–π
        self.app.results_tree.tag_configure('odd', background='#F9F9F9')    # –ü–æ–ª–æ—Å–∞—Ç—ã–π —Ñ–æ–Ω –¥–ª—è —á–µ—Ç–Ω—ã—Ö —Å—Ç—Ä–æ–∫
        
        # –ü—Ä–∏–≤—è–∑—ã–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–≤–æ–π–Ω–æ–≥–æ –∫–ª–∏–∫–∞
        self.app.results_tree.bind('<Double-1>', self.app.on_item_double_click)
        
        # –ü–æ–¥—Å–∫–∞–∑–∫–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        tip_label = ttk.Label(
            parent_frame,
            text="* –ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∑–∞–≥–æ–ª–æ–≤–æ–∫ —Å—Ç–æ–ª–±—Ü–∞ –¥–ª—è —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏. –ü—Ä–∞–≤—ã–π –∫–ª–∏–∫ –Ω–∞ —Å—Ç—Ä–æ–∫–µ –æ—Ç–∫—Ä—ã–≤–∞–µ—Ç –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω–æ–µ –º–µ–Ω—é.",
            font=FONT_SMALL_ITALIC,
            foreground=TEXT_HINT
        )
        tip_label.pack(pady=(5, 10), anchor=tk.W, padx=10)